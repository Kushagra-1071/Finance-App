{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kusha\\\\Downloads\\\\Finance-App\\\\finshark\\\\src\\\\Components\\\\Balance-Sheet\\\\BalanceSheet.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useOutletContext } from 'react-router';\nimport { getBalanceSheet } from '../../api';\nimport RatioList from '../RatioList/RatioList';\nimport Spinner from '../Spinners/Spinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst config = [{\n  label: /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"font-bold\",\n    children: \"Total Assets\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 12\n  }, this),\n  render: company => formatLargeMonetaryNumber(company.totalAssets)\n}, {\n  label: \"Current Assets\",\n  render: company => formatLargeMonetaryNumber(company.totalCurrentAssets)\n}, {\n  label: \"Total Cash\",\n  render: company => formatLargeMonetaryNumber(company.cashAndCashEquivalents)\n}, {\n  label: \"Property & equipment\",\n  render: company => formatLargeMonetaryNumber(company.propertyPlantEquipmentNet)\n}, {\n  label: \"Intangible Assets\",\n  render: company => formatLargeMonetaryNumber(company.intangibleAssets)\n}, {\n  label: \"Long Term Debt\",\n  render: company => formatLargeMonetaryNumber(company.longTermDebt)\n}, {\n  label: \"Total Debt\",\n  render: company => formatLargeMonetaryNumber(company.otherCurrentLiabilities)\n}, {\n  label: /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"font-bold\",\n    children: \"Total Liabilites\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 12\n  }, this),\n  render: company => formatLargeMonetaryNumber(company.totalLiabilities)\n}, {\n  label: \"Current Liabilities\",\n  render: company => formatLargeMonetaryNumber(company.totalCurrentLiabilities)\n}, {\n  label: \"Long-Term Debt\",\n  render: company => formatLargeMonetaryNumber(company.longTermDebt)\n}, {\n  label: \"Long-Term Income Taxes\",\n  render: company => formatLargeMonetaryNumber(company.otherLiabilities)\n}, {\n  label: \"Stakeholder's Equity\",\n  render: company => formatLargeMonetaryNumber(company.totalStockholdersEquity)\n}, {\n  label: \"Retained Earnings\",\n  render: company => formatLargeMonetaryNumber(company.retainedEarnings)\n}];\nconst BalanceSheet = props => {\n  _s();\n  const ticker = useOutletContext();\n  const [balanceSheet, setbalanceSheet] = useState();\n  useEffect(() => {\n    const getData = async () => {\n      const value = await getBalanceSheet(ticker);\n      setbalanceSheet(value === null || value === void 0 ? void 0 : value.data[0]);\n    };\n    getData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: balanceSheet ? /*#__PURE__*/_jsxDEV(RatioList, {\n      config: config,\n      data: balanceSheet\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 6\n    }, this) : /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 6\n    }, this)\n  }, void 0, false);\n};\n_s(BalanceSheet, \"nTLwkEhCLfXnRwy1GDf207AnL5U=\", false, function () {\n  return [useOutletContext];\n});\n_c = BalanceSheet;\nexport default BalanceSheet;\nvar _c;\n$RefreshReg$(_c, \"BalanceSheet\");","map":{"version":3,"names":["React","useEffect","useState","useOutletContext","getBalanceSheet","RatioList","Spinner","jsxDEV","_jsxDEV","Fragment","_Fragment","config","label","className","children","fileName","_jsxFileName","lineNumber","columnNumber","render","company","formatLargeMonetaryNumber","totalAssets","totalCurrentAssets","cashAndCashEquivalents","propertyPlantEquipmentNet","intangibleAssets","longTermDebt","otherCurrentLiabilities","totalLiabilities","totalCurrentLiabilities","otherLiabilities","totalStockholdersEquity","retainedEarnings","BalanceSheet","props","_s","ticker","balanceSheet","setbalanceSheet","getData","value","data","_c","$RefreshReg$"],"sources":["C:/Users/kusha/Downloads/Finance-App/finshark/src/Components/Balance-Sheet/BalanceSheet.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { CompanyBalanceSheet, CompanyCashFlow } from '../../company';\r\nimport { useOutletContext } from 'react-router';\r\nimport { getBalanceSheet } from '../../api';\r\nimport RatioList from '../RatioList/RatioList';\r\nimport Spinner from '../Spinners/Spinner';\r\n\r\ntype Props = {}\r\n\r\nconst config = [\r\n  {\r\n    label: <div className=\"font-bold\">Total Assets</div>,\r\n    render: (company: CompanyBalanceSheet) =>\r\n      formatLargeMonetaryNumber(company.totalAssets),\r\n  },\r\n  {\r\n    label: \"Current Assets\",\r\n    render: (company: CompanyBalanceSheet) =>\r\n      formatLargeMonetaryNumber(company.totalCurrentAssets),\r\n  },\r\n  {\r\n    label: \"Total Cash\",\r\n    render: (company: CompanyBalanceSheet) =>\r\n      formatLargeMonetaryNumber(company.cashAndCashEquivalents),\r\n  },\r\n  {\r\n    label: \"Property & equipment\",\r\n    render: (company: CompanyBalanceSheet) =>\r\n      formatLargeMonetaryNumber(company.propertyPlantEquipmentNet),\r\n  },\r\n  {\r\n    label: \"Intangible Assets\",\r\n    render: (company: CompanyBalanceSheet) =>\r\n      formatLargeMonetaryNumber(company.intangibleAssets),\r\n  },\r\n  {\r\n    label: \"Long Term Debt\",\r\n    render: (company: CompanyBalanceSheet) =>\r\n      formatLargeMonetaryNumber(company.longTermDebt),\r\n  },\r\n  {\r\n    label: \"Total Debt\",\r\n    render: (company: CompanyBalanceSheet) =>\r\n      formatLargeMonetaryNumber(company.otherCurrentLiabilities),\r\n  },\r\n  {\r\n    label: <div className=\"font-bold\">Total Liabilites</div>,\r\n    render: (company: CompanyBalanceSheet) =>\r\n      formatLargeMonetaryNumber(company.totalLiabilities),\r\n  },\r\n  {\r\n    label: \"Current Liabilities\",\r\n    render: (company: CompanyBalanceSheet) =>\r\n      formatLargeMonetaryNumber(company.totalCurrentLiabilities),\r\n  },\r\n  {\r\n    label: \"Long-Term Debt\",\r\n    render: (company: CompanyBalanceSheet) =>\r\n      formatLargeMonetaryNumber(company.longTermDebt),\r\n  },\r\n  {\r\n    label: \"Long-Term Income Taxes\",\r\n    render: (company: CompanyBalanceSheet) =>\r\n      formatLargeMonetaryNumber(company.otherLiabilities),\r\n  },\r\n  {\r\n    label: \"Stakeholder's Equity\",\r\n    render: (company: CompanyBalanceSheet) =>\r\n      formatLargeMonetaryNumber(company.totalStockholdersEquity),\r\n  },\r\n  {\r\n    label: \"Retained Earnings\",\r\n    render: (company: CompanyBalanceSheet) =>\r\n      formatLargeMonetaryNumber(company.retainedEarnings),\r\n  },\r\n  ];\r\nconst BalanceSheet = (props: Props) => {\r\n    const ticker=useOutletContext<string>();\r\n    const [balanceSheet,setbalanceSheet]=useState<CompanyBalanceSheet>();\r\n    useEffect(()=>\r\n    {\r\n        const getData=async() =>\r\n            {\r\n                const value=await getBalanceSheet(ticker!);\r\n                setbalanceSheet(value?.data[0]);\r\n            };\r\n            getData();\r\n    },[]);\r\n    \r\n  return (\r\n    <>\r\n    {balanceSheet ?\r\n    (<RatioList config={config} data={balanceSheet}/>)    :\r\n    (<Spinner/>)\r\n\r\n}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default BalanceSheet"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAElD,SAASC,gBAAgB,QAAQ,cAAc;AAC/C,SAASC,eAAe,QAAQ,WAAW;AAC3C,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,OAAO,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAI1C,MAAMC,MAAM,GAAG,CACb;EACEC,KAAK,eAAEJ,OAAA;IAAKK,SAAS,EAAC,WAAW;IAAAC,QAAA,EAAC;EAAY;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EACpDC,MAAM,EAAGC,OAA4B,IACnCC,yBAAyB,CAACD,OAAO,CAACE,WAAW;AACjD,CAAC,EACD;EACEV,KAAK,EAAE,gBAAgB;EACvBO,MAAM,EAAGC,OAA4B,IACnCC,yBAAyB,CAACD,OAAO,CAACG,kBAAkB;AACxD,CAAC,EACD;EACEX,KAAK,EAAE,YAAY;EACnBO,MAAM,EAAGC,OAA4B,IACnCC,yBAAyB,CAACD,OAAO,CAACI,sBAAsB;AAC5D,CAAC,EACD;EACEZ,KAAK,EAAE,sBAAsB;EAC7BO,MAAM,EAAGC,OAA4B,IACnCC,yBAAyB,CAACD,OAAO,CAACK,yBAAyB;AAC/D,CAAC,EACD;EACEb,KAAK,EAAE,mBAAmB;EAC1BO,MAAM,EAAGC,OAA4B,IACnCC,yBAAyB,CAACD,OAAO,CAACM,gBAAgB;AACtD,CAAC,EACD;EACEd,KAAK,EAAE,gBAAgB;EACvBO,MAAM,EAAGC,OAA4B,IACnCC,yBAAyB,CAACD,OAAO,CAACO,YAAY;AAClD,CAAC,EACD;EACEf,KAAK,EAAE,YAAY;EACnBO,MAAM,EAAGC,OAA4B,IACnCC,yBAAyB,CAACD,OAAO,CAACQ,uBAAuB;AAC7D,CAAC,EACD;EACEhB,KAAK,eAAEJ,OAAA;IAAKK,SAAS,EAAC,WAAW;IAAAC,QAAA,EAAC;EAAgB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EACxDC,MAAM,EAAGC,OAA4B,IACnCC,yBAAyB,CAACD,OAAO,CAACS,gBAAgB;AACtD,CAAC,EACD;EACEjB,KAAK,EAAE,qBAAqB;EAC5BO,MAAM,EAAGC,OAA4B,IACnCC,yBAAyB,CAACD,OAAO,CAACU,uBAAuB;AAC7D,CAAC,EACD;EACElB,KAAK,EAAE,gBAAgB;EACvBO,MAAM,EAAGC,OAA4B,IACnCC,yBAAyB,CAACD,OAAO,CAACO,YAAY;AAClD,CAAC,EACD;EACEf,KAAK,EAAE,wBAAwB;EAC/BO,MAAM,EAAGC,OAA4B,IACnCC,yBAAyB,CAACD,OAAO,CAACW,gBAAgB;AACtD,CAAC,EACD;EACEnB,KAAK,EAAE,sBAAsB;EAC7BO,MAAM,EAAGC,OAA4B,IACnCC,yBAAyB,CAACD,OAAO,CAACY,uBAAuB;AAC7D,CAAC,EACD;EACEpB,KAAK,EAAE,mBAAmB;EAC1BO,MAAM,EAAGC,OAA4B,IACnCC,yBAAyB,CAACD,OAAO,CAACa,gBAAgB;AACtD,CAAC,CACA;AACH,MAAMC,YAAY,GAAIC,KAAY,IAAK;EAAAC,EAAA;EACnC,MAAMC,MAAM,GAAClC,gBAAgB,CAAS,CAAC;EACvC,MAAM,CAACmC,YAAY,EAACC,eAAe,CAAC,GAACrC,QAAQ,CAAsB,CAAC;EACpED,SAAS,CAAC,MACV;IACI,MAAMuC,OAAO,GAAC,MAAAA,CAAA,KACV;MACI,MAAMC,KAAK,GAAC,MAAMrC,eAAe,CAACiC,MAAO,CAAC;MAC1CE,eAAe,CAACE,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEC,IAAI,CAAC,CAAC,CAAC,CAAC;IACnC,CAAC;IACDF,OAAO,CAAC,CAAC;EACjB,CAAC,EAAC,EAAE,CAAC;EAEP,oBACEhC,OAAA,CAAAE,SAAA;IAAAI,QAAA,EACCwB,YAAY,gBACZ9B,OAAA,CAACH,SAAS;MAACM,MAAM,EAAEA,MAAO;MAAC+B,IAAI,EAAEJ;IAAa;MAAAvB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,gBAChDV,OAAA,CAACF,OAAO;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC;EAAE,gBAGV,CAAC;AAEP,CAAC;AAAAkB,EAAA,CAtBKF,YAAY;EAAA,QACD/B,gBAAgB;AAAA;AAAAwC,EAAA,GAD3BT,YAAY;AAwBlB,eAAeA,YAAY;AAAA,IAAAS,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}